/*
 * ParallelStack RSearch API
 * REST API Specification for ParallelStack RSearch API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: team@parallelstack.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.parallelstack.rsearch;

import com.parallelstack.ApiException;
import com.parallelstack.rsearch.model.InlineResponse200;
import com.parallelstack.rsearch.model.InlineResponse2001;
import com.parallelstack.rsearch.model.InlineResponse2002;
import com.parallelstack.rsearch.model.InlineResponse2003;
import com.parallelstack.rsearch.model.InlineResponse2004;
import com.parallelstack.rsearch.model.InlineResponse2005;
import com.parallelstack.rsearch.model.InlineResponse2006;
import com.parallelstack.rsearch.model.InlineResponse2007;
import com.parallelstack.rsearch.model.InlineResponse2008;
import com.parallelstack.rsearch.model.InlineResponse2009;
import com.parallelstack.rsearch.model.InlineResponse201;
import com.parallelstack.rsearch.model.InlineResponse2011;
import com.parallelstack.rsearch.model.InlineResponse202;
import com.parallelstack.rsearch.model.InlineResponse400;
import com.parallelstack.rsearch.model.InlineResponse4001;
import com.parallelstack.rsearch.model.InlineResponse4002;
import com.parallelstack.rsearch.model.InlineResponse4003;
import com.parallelstack.rsearch.model.InlineResponse4004;
import com.parallelstack.rsearch.model.InlineResponse4005;
import com.parallelstack.rsearch.model.InlineResponse4006;
import com.parallelstack.rsearch.model.InlineResponse4007;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for RsearchApi
 */
@Ignore
public class RsearchApiTest {

    private final RsearchApi api = new RsearchApi();

    
    /**
     * 
     *
     * Creates &#x60;doc_id&#x60; in &#x60;doc_type_name&#x60; for &#x60;index_name&#x60;
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addDocumentTest() throws ApiException {
        String indexName = null;
        String docTypeName = null;
        String docId = null;
        Object documentDetails = null;
        InlineResponse2006 response = api.addDocument(indexName, docTypeName, docId, documentDetails);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Creates specific &#x60;document_type&#x60; in &#x60;index_name&#x60; with specified parameters
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addDocumentTypeTest() throws ApiException {
        String indexName = null;
        String docTypeName = null;
        Object docTypeDetails = null;
        InlineResponse2011 response = api.addDocumentType(indexName, docTypeName, docTypeDetails);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Creates &#x60;a new index&#x60;
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addIndexTest() throws ApiException {
        String indexName = null;
        InlineResponse201 response = api.addIndex(indexName);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Deletes &#x60;doc_id&#x60; in &#x60;doc_type_name&#x60; for &#x60;index_name&#x60;
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteDocumentTest() throws ApiException {
        String indexName = null;
        String docTypeName = null;
        String docId = null;
        InlineResponse2007 response = api.deleteDocument(indexName, docTypeName, docId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Deletes &#x60;an index&#x60; {index_name}
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteIndexTest() throws ApiException {
        String indexName = null;
        InlineResponse202 response = api.deleteIndex(indexName);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Advanced Search which gets all documents in &#x60;index_name&#x60; for provided search criteria
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAdvancedSearchResultsTest() throws ApiException {
        String indexName = null;
        String docTypeName = null;
        Object search = null;
        InlineResponse2008 response = api.getAdvancedSearchResults(indexName, docTypeName, search);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Gets &#x60;All document_types&#x60; present in &#x60;index_name&#x60;
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAllDocumentTypesTest() throws ApiException {
        String indexName = null;
        InlineResponse2002 response = api.getAllDocumentTypes(indexName);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Fetches all documents in &#x60;doc_type_name&#x60; for &#x60;index_name&#x60;
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAllDocumentsTest() throws ApiException {
        String indexName = null;
        String docTypeName = null;
        InlineResponse2004 response = api.getAllDocuments(indexName, docTypeName);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Fetches &#x60;All indexes&#x60;
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAllIndexesTest() throws ApiException {
        InlineResponse200 response = api.getAllIndexes();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Basic Search which gets all documents in &#x60;index_name&#x60; for provided search criteria
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getBasicSearchResultsTest() throws ApiException {
        String indexName = null;
        String q = null;
        InlineResponse2008 response = api.getBasicSearchResults(indexName, q);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Fetches details of &#x60;doc_id&#x60; in &#x60;doc_type_name&#x60; for &#x60;index_name&#x60;
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDocumentTest() throws ApiException {
        String indexName = null;
        String docTypeName = null;
        String docId = null;
        InlineResponse2005 response = api.getDocument(indexName, docTypeName, docId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Checks whether &#x60;document_type&#x60; in &#x60;index_name&#x60; exists
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDocumentTypeTest() throws ApiException {
        String indexName = null;
        String docTypeName = null;
        InlineResponse2003 response = api.getDocumentType(indexName, docTypeName);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Checks whether &#x60;a particular index&#x60; {index_name} exists
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getIndexTest() throws ApiException {
        String indexName = null;
        InlineResponse2001 response = api.getIndex(indexName);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Basic Search - Gets Suggestions from &#x60;doc_type_name&#x60; in &#x60;index_name&#x60;
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSuggestResultsTest() throws ApiException {
        String indexName = null;
        String docTypeName = null;
        String q = null;
        InlineResponse2009 response = api.getSuggestResults(indexName, docTypeName, q);

        // TODO: test validations
    }
    
}
