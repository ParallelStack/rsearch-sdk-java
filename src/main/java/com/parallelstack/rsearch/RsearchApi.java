/*
 * ParallelStack RSearch API
 * REST API Specification for ParallelStack RSearch API
 *
 * OpenAPI spec version: 1.2.1
 * Contact: team@parallelstack.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.parallelstack.rsearch;

import com.parallelstack.ApiCallback;
import com.parallelstack.ApiClient;
import com.parallelstack.ApiException;
import com.parallelstack.ApiResponse;
import com.parallelstack.Configuration;
import com.parallelstack.Pair;
import com.parallelstack.ProgressRequestBody;
import com.parallelstack.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.parallelstack.rsearch.model.CreateDocTypeFailure;
import com.parallelstack.rsearch.model.CreateDocTypeSuccess;
import com.parallelstack.rsearch.model.CreateDocumentFailure;
import com.parallelstack.rsearch.model.CreateDocumentSuccess;
import com.parallelstack.rsearch.model.CreateIndexFailure;
import com.parallelstack.rsearch.model.CreateIndexSuccess;
import com.parallelstack.rsearch.model.DeleteDocumentFailure;
import com.parallelstack.rsearch.model.DeleteDocumentSuccess;
import com.parallelstack.rsearch.model.DeleteIndexFailure;
import com.parallelstack.rsearch.model.DeleteIndexSuccess;
import com.parallelstack.rsearch.model.Document;
import com.parallelstack.rsearch.model.DocumentType;
import com.parallelstack.rsearch.model.GetDocTypeFailure;
import com.parallelstack.rsearch.model.GetDocTypeSuccess;
import com.parallelstack.rsearch.model.GetDocTypesFailure;
import com.parallelstack.rsearch.model.GetDocTypesSuccess;
import com.parallelstack.rsearch.model.GetDocumentFailure;
import com.parallelstack.rsearch.model.GetDocumentSuccess;
import com.parallelstack.rsearch.model.GetIndexFailure;
import com.parallelstack.rsearch.model.GetIndexSuccess;
import com.parallelstack.rsearch.model.GetIndexesFailure;
import com.parallelstack.rsearch.model.GetIndexesSuccess;
import com.parallelstack.rsearch.model.SearchFailure;
import com.parallelstack.rsearch.model.SearchQuery;
import com.parallelstack.rsearch.model.SearchSuccess;
import com.parallelstack.rsearch.model.SuggestFailure;
import com.parallelstack.rsearch.model.SuggestQuery;
import com.parallelstack.rsearch.model.SuggestSuccess;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class RsearchApi {
    private ApiClient apiClient;

    public RsearchApi() {
        this(Configuration.getDefaultApiClient());
    }

    public RsearchApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for addDocument
     * @param indexName Name of the index (required)
     * @param docTypeName Name of the document_type (required)
     * @param docId Document ID (required)
     * @param documentDetails Details of the document (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addDocumentCall(String indexName, String docTypeName, String docId, Document documentDetails, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = documentDetails;

        // create path and map variables
        String localVarPath = "/indexes/{index_name}/document_types/{doc_type_name}/documents/{doc_id}"
            .replaceAll("\\{" + "index_name" + "\\}", apiClient.escapeString(indexName.toString()))
            .replaceAll("\\{" + "doc_type_name" + "\\}", apiClient.escapeString(docTypeName.toString()))
            .replaceAll("\\{" + "doc_id" + "\\}", apiClient.escapeString(docId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "authToken", "writeAppID" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addDocumentValidateBeforeCall(String indexName, String docTypeName, String docId, Document documentDetails, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'indexName' is set
        if (indexName == null) {
            throw new ApiException("Missing the required parameter 'indexName' when calling addDocument(Async)");
        }
        
        // verify the required parameter 'docTypeName' is set
        if (docTypeName == null) {
            throw new ApiException("Missing the required parameter 'docTypeName' when calling addDocument(Async)");
        }
        
        // verify the required parameter 'docId' is set
        if (docId == null) {
            throw new ApiException("Missing the required parameter 'docId' when calling addDocument(Async)");
        }
        
        // verify the required parameter 'documentDetails' is set
        if (documentDetails == null) {
            throw new ApiException("Missing the required parameter 'documentDetails' when calling addDocument(Async)");
        }
        

        com.squareup.okhttp.Call call = addDocumentCall(indexName, docTypeName, docId, documentDetails, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Creates &#x60;doc_id&#x60; in &#x60;doc_type_name&#x60; for &#x60;index_name&#x60;
     * @param indexName Name of the index (required)
     * @param docTypeName Name of the document_type (required)
     * @param docId Document ID (required)
     * @param documentDetails Details of the document (required)
     * @return CreateDocumentSuccess
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CreateDocumentSuccess addDocument(String indexName, String docTypeName, String docId, Document documentDetails) throws ApiException {
        ApiResponse<CreateDocumentSuccess> resp = addDocumentWithHttpInfo(indexName, docTypeName, docId, documentDetails);
        return resp.getData();
    }

    /**
     * 
     * Creates &#x60;doc_id&#x60; in &#x60;doc_type_name&#x60; for &#x60;index_name&#x60;
     * @param indexName Name of the index (required)
     * @param docTypeName Name of the document_type (required)
     * @param docId Document ID (required)
     * @param documentDetails Details of the document (required)
     * @return ApiResponse&lt;CreateDocumentSuccess&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CreateDocumentSuccess> addDocumentWithHttpInfo(String indexName, String docTypeName, String docId, Document documentDetails) throws ApiException {
        com.squareup.okhttp.Call call = addDocumentValidateBeforeCall(indexName, docTypeName, docId, documentDetails, null, null);
        Type localVarReturnType = new TypeToken<CreateDocumentSuccess>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates &#x60;doc_id&#x60; in &#x60;doc_type_name&#x60; for &#x60;index_name&#x60;
     * @param indexName Name of the index (required)
     * @param docTypeName Name of the document_type (required)
     * @param docId Document ID (required)
     * @param documentDetails Details of the document (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addDocumentAsync(String indexName, String docTypeName, String docId, Document documentDetails, final ApiCallback<CreateDocumentSuccess> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addDocumentValidateBeforeCall(indexName, docTypeName, docId, documentDetails, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CreateDocumentSuccess>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for addDocumentType
     * @param indexName Name of the index (required)
     * @param docTypeName Name of the document_type (required)
     * @param docTypeDetails Details of the document_type (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addDocumentTypeCall(String indexName, String docTypeName, DocumentType docTypeDetails, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = docTypeDetails;

        // create path and map variables
        String localVarPath = "/indexes/{index_name}/document_types/{doc_type_name}"
            .replaceAll("\\{" + "index_name" + "\\}", apiClient.escapeString(indexName.toString()))
            .replaceAll("\\{" + "doc_type_name" + "\\}", apiClient.escapeString(docTypeName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "authToken", "writeAppID" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addDocumentTypeValidateBeforeCall(String indexName, String docTypeName, DocumentType docTypeDetails, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'indexName' is set
        if (indexName == null) {
            throw new ApiException("Missing the required parameter 'indexName' when calling addDocumentType(Async)");
        }
        
        // verify the required parameter 'docTypeName' is set
        if (docTypeName == null) {
            throw new ApiException("Missing the required parameter 'docTypeName' when calling addDocumentType(Async)");
        }
        
        // verify the required parameter 'docTypeDetails' is set
        if (docTypeDetails == null) {
            throw new ApiException("Missing the required parameter 'docTypeDetails' when calling addDocumentType(Async)");
        }
        

        com.squareup.okhttp.Call call = addDocumentTypeCall(indexName, docTypeName, docTypeDetails, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Creates specific &#x60;document_type&#x60; in &#x60;index_name&#x60; with specified parameters. You should define the parameters correctly as per the getting started guide, else getting the right structure might be an issue.
     * @param indexName Name of the index (required)
     * @param docTypeName Name of the document_type (required)
     * @param docTypeDetails Details of the document_type (required)
     * @return CreateDocTypeSuccess
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CreateDocTypeSuccess addDocumentType(String indexName, String docTypeName, DocumentType docTypeDetails) throws ApiException {
        ApiResponse<CreateDocTypeSuccess> resp = addDocumentTypeWithHttpInfo(indexName, docTypeName, docTypeDetails);
        return resp.getData();
    }

    /**
     * 
     * Creates specific &#x60;document_type&#x60; in &#x60;index_name&#x60; with specified parameters. You should define the parameters correctly as per the getting started guide, else getting the right structure might be an issue.
     * @param indexName Name of the index (required)
     * @param docTypeName Name of the document_type (required)
     * @param docTypeDetails Details of the document_type (required)
     * @return ApiResponse&lt;CreateDocTypeSuccess&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CreateDocTypeSuccess> addDocumentTypeWithHttpInfo(String indexName, String docTypeName, DocumentType docTypeDetails) throws ApiException {
        com.squareup.okhttp.Call call = addDocumentTypeValidateBeforeCall(indexName, docTypeName, docTypeDetails, null, null);
        Type localVarReturnType = new TypeToken<CreateDocTypeSuccess>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates specific &#x60;document_type&#x60; in &#x60;index_name&#x60; with specified parameters. You should define the parameters correctly as per the getting started guide, else getting the right structure might be an issue.
     * @param indexName Name of the index (required)
     * @param docTypeName Name of the document_type (required)
     * @param docTypeDetails Details of the document_type (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addDocumentTypeAsync(String indexName, String docTypeName, DocumentType docTypeDetails, final ApiCallback<CreateDocTypeSuccess> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addDocumentTypeValidateBeforeCall(indexName, docTypeName, docTypeDetails, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CreateDocTypeSuccess>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for addIndex
     * @param indexName Name of the index (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addIndexCall(String indexName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/indexes/{index_name}"
            .replaceAll("\\{" + "index_name" + "\\}", apiClient.escapeString(indexName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "authToken", "writeAppID" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addIndexValidateBeforeCall(String indexName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'indexName' is set
        if (indexName == null) {
            throw new ApiException("Missing the required parameter 'indexName' when calling addIndex(Async)");
        }
        

        com.squareup.okhttp.Call call = addIndexCall(indexName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Creates &#x60;a new index&#x60;.
     * @param indexName Name of the index (required)
     * @return CreateIndexSuccess
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CreateIndexSuccess addIndex(String indexName) throws ApiException {
        ApiResponse<CreateIndexSuccess> resp = addIndexWithHttpInfo(indexName);
        return resp.getData();
    }

    /**
     * 
     * Creates &#x60;a new index&#x60;.
     * @param indexName Name of the index (required)
     * @return ApiResponse&lt;CreateIndexSuccess&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CreateIndexSuccess> addIndexWithHttpInfo(String indexName) throws ApiException {
        com.squareup.okhttp.Call call = addIndexValidateBeforeCall(indexName, null, null);
        Type localVarReturnType = new TypeToken<CreateIndexSuccess>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates &#x60;a new index&#x60;.
     * @param indexName Name of the index (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addIndexAsync(String indexName, final ApiCallback<CreateIndexSuccess> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addIndexValidateBeforeCall(indexName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CreateIndexSuccess>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteDocument
     * @param indexName Name of the index (required)
     * @param docTypeName Name of the document_type (required)
     * @param docId Document ID (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteDocumentCall(String indexName, String docTypeName, String docId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/indexes/{index_name}/document_types/{doc_type_name}/documents/{doc_id}"
            .replaceAll("\\{" + "index_name" + "\\}", apiClient.escapeString(indexName.toString()))
            .replaceAll("\\{" + "doc_type_name" + "\\}", apiClient.escapeString(docTypeName.toString()))
            .replaceAll("\\{" + "doc_id" + "\\}", apiClient.escapeString(docId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "authToken", "writeAppID" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteDocumentValidateBeforeCall(String indexName, String docTypeName, String docId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'indexName' is set
        if (indexName == null) {
            throw new ApiException("Missing the required parameter 'indexName' when calling deleteDocument(Async)");
        }
        
        // verify the required parameter 'docTypeName' is set
        if (docTypeName == null) {
            throw new ApiException("Missing the required parameter 'docTypeName' when calling deleteDocument(Async)");
        }
        
        // verify the required parameter 'docId' is set
        if (docId == null) {
            throw new ApiException("Missing the required parameter 'docId' when calling deleteDocument(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteDocumentCall(indexName, docTypeName, docId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Deletes &#x60;doc_id&#x60; in &#x60;doc_type_name&#x60; for &#x60;index_name&#x60;
     * @param indexName Name of the index (required)
     * @param docTypeName Name of the document_type (required)
     * @param docId Document ID (required)
     * @return DeleteDocumentSuccess
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DeleteDocumentSuccess deleteDocument(String indexName, String docTypeName, String docId) throws ApiException {
        ApiResponse<DeleteDocumentSuccess> resp = deleteDocumentWithHttpInfo(indexName, docTypeName, docId);
        return resp.getData();
    }

    /**
     * 
     * Deletes &#x60;doc_id&#x60; in &#x60;doc_type_name&#x60; for &#x60;index_name&#x60;
     * @param indexName Name of the index (required)
     * @param docTypeName Name of the document_type (required)
     * @param docId Document ID (required)
     * @return ApiResponse&lt;DeleteDocumentSuccess&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DeleteDocumentSuccess> deleteDocumentWithHttpInfo(String indexName, String docTypeName, String docId) throws ApiException {
        com.squareup.okhttp.Call call = deleteDocumentValidateBeforeCall(indexName, docTypeName, docId, null, null);
        Type localVarReturnType = new TypeToken<DeleteDocumentSuccess>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Deletes &#x60;doc_id&#x60; in &#x60;doc_type_name&#x60; for &#x60;index_name&#x60;
     * @param indexName Name of the index (required)
     * @param docTypeName Name of the document_type (required)
     * @param docId Document ID (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteDocumentAsync(String indexName, String docTypeName, String docId, final ApiCallback<DeleteDocumentSuccess> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteDocumentValidateBeforeCall(indexName, docTypeName, docId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DeleteDocumentSuccess>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteIndex
     * @param indexName Name of the index (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteIndexCall(String indexName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/indexes/{index_name}"
            .replaceAll("\\{" + "index_name" + "\\}", apiClient.escapeString(indexName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "authToken", "writeAppID" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteIndexValidateBeforeCall(String indexName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'indexName' is set
        if (indexName == null) {
            throw new ApiException("Missing the required parameter 'indexName' when calling deleteIndex(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteIndexCall(indexName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Deletes &#x60;an index&#x60; {index_name}
     * @param indexName Name of the index (required)
     * @return DeleteIndexSuccess
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DeleteIndexSuccess deleteIndex(String indexName) throws ApiException {
        ApiResponse<DeleteIndexSuccess> resp = deleteIndexWithHttpInfo(indexName);
        return resp.getData();
    }

    /**
     * 
     * Deletes &#x60;an index&#x60; {index_name}
     * @param indexName Name of the index (required)
     * @return ApiResponse&lt;DeleteIndexSuccess&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DeleteIndexSuccess> deleteIndexWithHttpInfo(String indexName) throws ApiException {
        com.squareup.okhttp.Call call = deleteIndexValidateBeforeCall(indexName, null, null);
        Type localVarReturnType = new TypeToken<DeleteIndexSuccess>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Deletes &#x60;an index&#x60; {index_name}
     * @param indexName Name of the index (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteIndexAsync(String indexName, final ApiCallback<DeleteIndexSuccess> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteIndexValidateBeforeCall(indexName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DeleteIndexSuccess>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAdvancedDocTypeSuggestResults
     * @param indexName Name of the index (required)
     * @param docTypeName Name of the Document_type (required)
     * @param suggest Details of the search query (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAdvancedDocTypeSuggestResultsCall(String indexName, String docTypeName, SuggestQuery suggest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = suggest;

        // create path and map variables
        String localVarPath = "/indexes/{index_name}/document_types/{doc_type_name}/suggest"
            .replaceAll("\\{" + "index_name" + "\\}", apiClient.escapeString(indexName.toString()))
            .replaceAll("\\{" + "doc_type_name" + "\\}", apiClient.escapeString(docTypeName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "authToken", "readAppID" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAdvancedDocTypeSuggestResultsValidateBeforeCall(String indexName, String docTypeName, SuggestQuery suggest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'indexName' is set
        if (indexName == null) {
            throw new ApiException("Missing the required parameter 'indexName' when calling getAdvancedDocTypeSuggestResults(Async)");
        }
        
        // verify the required parameter 'docTypeName' is set
        if (docTypeName == null) {
            throw new ApiException("Missing the required parameter 'docTypeName' when calling getAdvancedDocTypeSuggestResults(Async)");
        }
        
        // verify the required parameter 'suggest' is set
        if (suggest == null) {
            throw new ApiException("Missing the required parameter 'suggest' when calling getAdvancedDocTypeSuggestResults(Async)");
        }
        

        com.squareup.okhttp.Call call = getAdvancedDocTypeSuggestResultsCall(indexName, docTypeName, suggest, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Gets Suggestions from &#x60;doc_type_name&#x60; in &#x60;index_name&#x60; limited by the body params. Please ensure you refer the getting started guides, to get the format of the query right.
     * @param indexName Name of the index (required)
     * @param docTypeName Name of the Document_type (required)
     * @param suggest Details of the search query (required)
     * @return SuggestSuccess
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SuggestSuccess getAdvancedDocTypeSuggestResults(String indexName, String docTypeName, SuggestQuery suggest) throws ApiException {
        ApiResponse<SuggestSuccess> resp = getAdvancedDocTypeSuggestResultsWithHttpInfo(indexName, docTypeName, suggest);
        return resp.getData();
    }

    /**
     * 
     * Gets Suggestions from &#x60;doc_type_name&#x60; in &#x60;index_name&#x60; limited by the body params. Please ensure you refer the getting started guides, to get the format of the query right.
     * @param indexName Name of the index (required)
     * @param docTypeName Name of the Document_type (required)
     * @param suggest Details of the search query (required)
     * @return ApiResponse&lt;SuggestSuccess&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SuggestSuccess> getAdvancedDocTypeSuggestResultsWithHttpInfo(String indexName, String docTypeName, SuggestQuery suggest) throws ApiException {
        com.squareup.okhttp.Call call = getAdvancedDocTypeSuggestResultsValidateBeforeCall(indexName, docTypeName, suggest, null, null);
        Type localVarReturnType = new TypeToken<SuggestSuccess>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets Suggestions from &#x60;doc_type_name&#x60; in &#x60;index_name&#x60; limited by the body params. Please ensure you refer the getting started guides, to get the format of the query right.
     * @param indexName Name of the index (required)
     * @param docTypeName Name of the Document_type (required)
     * @param suggest Details of the search query (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAdvancedDocTypeSuggestResultsAsync(String indexName, String docTypeName, SuggestQuery suggest, final ApiCallback<SuggestSuccess> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAdvancedDocTypeSuggestResultsValidateBeforeCall(indexName, docTypeName, suggest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SuggestSuccess>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAdvancedIndexSuggestResults
     * @param indexName Name of the index (required)
     * @param search Details of the search query (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAdvancedIndexSuggestResultsCall(String indexName, SuggestQuery search, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = search;

        // create path and map variables
        String localVarPath = "/indexes/{index_name}/suggest"
            .replaceAll("\\{" + "index_name" + "\\}", apiClient.escapeString(indexName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "authToken", "readAppID" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAdvancedIndexSuggestResultsValidateBeforeCall(String indexName, SuggestQuery search, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'indexName' is set
        if (indexName == null) {
            throw new ApiException("Missing the required parameter 'indexName' when calling getAdvancedIndexSuggestResults(Async)");
        }
        
        // verify the required parameter 'search' is set
        if (search == null) {
            throw new ApiException("Missing the required parameter 'search' when calling getAdvancedIndexSuggestResults(Async)");
        }
        

        com.squareup.okhttp.Call call = getAdvancedIndexSuggestResultsCall(indexName, search, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Gets Suggestions in &#x60;index_name&#x60; limited by the request body fields
     * @param indexName Name of the index (required)
     * @param search Details of the search query (required)
     * @return SuggestSuccess
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SuggestSuccess getAdvancedIndexSuggestResults(String indexName, SuggestQuery search) throws ApiException {
        ApiResponse<SuggestSuccess> resp = getAdvancedIndexSuggestResultsWithHttpInfo(indexName, search);
        return resp.getData();
    }

    /**
     * 
     * Gets Suggestions in &#x60;index_name&#x60; limited by the request body fields
     * @param indexName Name of the index (required)
     * @param search Details of the search query (required)
     * @return ApiResponse&lt;SuggestSuccess&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SuggestSuccess> getAdvancedIndexSuggestResultsWithHttpInfo(String indexName, SuggestQuery search) throws ApiException {
        com.squareup.okhttp.Call call = getAdvancedIndexSuggestResultsValidateBeforeCall(indexName, search, null, null);
        Type localVarReturnType = new TypeToken<SuggestSuccess>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets Suggestions in &#x60;index_name&#x60; limited by the request body fields
     * @param indexName Name of the index (required)
     * @param search Details of the search query (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAdvancedIndexSuggestResultsAsync(String indexName, SuggestQuery search, final ApiCallback<SuggestSuccess> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAdvancedIndexSuggestResultsValidateBeforeCall(indexName, search, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SuggestSuccess>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAdvancedSearchResults
     * @param indexName Name of the index (required)
     * @param docTypeName Name of the Document_type (required)
     * @param search Details of the search query (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAdvancedSearchResultsCall(String indexName, String docTypeName, SearchQuery search, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = search;

        // create path and map variables
        String localVarPath = "/indexes/{index_name}/document_types/{doc_type_name}/search"
            .replaceAll("\\{" + "index_name" + "\\}", apiClient.escapeString(indexName.toString()))
            .replaceAll("\\{" + "doc_type_name" + "\\}", apiClient.escapeString(docTypeName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "authToken", "readAppID" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAdvancedSearchResultsValidateBeforeCall(String indexName, String docTypeName, SearchQuery search, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'indexName' is set
        if (indexName == null) {
            throw new ApiException("Missing the required parameter 'indexName' when calling getAdvancedSearchResults(Async)");
        }
        
        // verify the required parameter 'docTypeName' is set
        if (docTypeName == null) {
            throw new ApiException("Missing the required parameter 'docTypeName' when calling getAdvancedSearchResults(Async)");
        }
        
        // verify the required parameter 'search' is set
        if (search == null) {
            throw new ApiException("Missing the required parameter 'search' when calling getAdvancedSearchResults(Async)");
        }
        

        com.squareup.okhttp.Call call = getAdvancedSearchResultsCall(indexName, docTypeName, search, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Advanced Search which gets all documents in &#x60;index_name&#x60; for provided search criteria. Please ensure you refer the getting started guides, to get the format of the query right.
     * @param indexName Name of the index (required)
     * @param docTypeName Name of the Document_type (required)
     * @param search Details of the search query (required)
     * @return SearchSuccess
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SearchSuccess getAdvancedSearchResults(String indexName, String docTypeName, SearchQuery search) throws ApiException {
        ApiResponse<SearchSuccess> resp = getAdvancedSearchResultsWithHttpInfo(indexName, docTypeName, search);
        return resp.getData();
    }

    /**
     * 
     * Advanced Search which gets all documents in &#x60;index_name&#x60; for provided search criteria. Please ensure you refer the getting started guides, to get the format of the query right.
     * @param indexName Name of the index (required)
     * @param docTypeName Name of the Document_type (required)
     * @param search Details of the search query (required)
     * @return ApiResponse&lt;SearchSuccess&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SearchSuccess> getAdvancedSearchResultsWithHttpInfo(String indexName, String docTypeName, SearchQuery search) throws ApiException {
        com.squareup.okhttp.Call call = getAdvancedSearchResultsValidateBeforeCall(indexName, docTypeName, search, null, null);
        Type localVarReturnType = new TypeToken<SearchSuccess>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Advanced Search which gets all documents in &#x60;index_name&#x60; for provided search criteria. Please ensure you refer the getting started guides, to get the format of the query right.
     * @param indexName Name of the index (required)
     * @param docTypeName Name of the Document_type (required)
     * @param search Details of the search query (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAdvancedSearchResultsAsync(String indexName, String docTypeName, SearchQuery search, final ApiCallback<SearchSuccess> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAdvancedSearchResultsValidateBeforeCall(indexName, docTypeName, search, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SearchSuccess>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAllDocumentTypes
     * @param indexName Name of the index (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAllDocumentTypesCall(String indexName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/indexes/{index_name}/document_types"
            .replaceAll("\\{" + "index_name" + "\\}", apiClient.escapeString(indexName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "authToken", "readAppID" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAllDocumentTypesValidateBeforeCall(String indexName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'indexName' is set
        if (indexName == null) {
            throw new ApiException("Missing the required parameter 'indexName' when calling getAllDocumentTypes(Async)");
        }
        

        com.squareup.okhttp.Call call = getAllDocumentTypesCall(indexName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Gets &#x60;All document_types&#x60; present in &#x60;index_name&#x60;
     * @param indexName Name of the index (required)
     * @return GetDocTypesSuccess
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GetDocTypesSuccess getAllDocumentTypes(String indexName) throws ApiException {
        ApiResponse<GetDocTypesSuccess> resp = getAllDocumentTypesWithHttpInfo(indexName);
        return resp.getData();
    }

    /**
     * 
     * Gets &#x60;All document_types&#x60; present in &#x60;index_name&#x60;
     * @param indexName Name of the index (required)
     * @return ApiResponse&lt;GetDocTypesSuccess&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GetDocTypesSuccess> getAllDocumentTypesWithHttpInfo(String indexName) throws ApiException {
        com.squareup.okhttp.Call call = getAllDocumentTypesValidateBeforeCall(indexName, null, null);
        Type localVarReturnType = new TypeToken<GetDocTypesSuccess>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets &#x60;All document_types&#x60; present in &#x60;index_name&#x60;
     * @param indexName Name of the index (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAllDocumentTypesAsync(String indexName, final ApiCallback<GetDocTypesSuccess> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAllDocumentTypesValidateBeforeCall(indexName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetDocTypesSuccess>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAllIndexes
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAllIndexesCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/indexes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "authToken", "readAppID" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAllIndexesValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getAllIndexesCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Fetches &#x60;All indexes&#x60; that the user has. Not recommended to be used in production code, as there isn&#39;t that big a Use case for listing all indexes!
     * @return GetIndexesSuccess
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GetIndexesSuccess getAllIndexes() throws ApiException {
        ApiResponse<GetIndexesSuccess> resp = getAllIndexesWithHttpInfo();
        return resp.getData();
    }

    /**
     * 
     * Fetches &#x60;All indexes&#x60; that the user has. Not recommended to be used in production code, as there isn&#39;t that big a Use case for listing all indexes!
     * @return ApiResponse&lt;GetIndexesSuccess&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GetIndexesSuccess> getAllIndexesWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getAllIndexesValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<GetIndexesSuccess>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Fetches &#x60;All indexes&#x60; that the user has. Not recommended to be used in production code, as there isn&#39;t that big a Use case for listing all indexes!
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAllIndexesAsync(final ApiCallback<GetIndexesSuccess> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAllIndexesValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetIndexesSuccess>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getBasicSearchResults
     * @param indexName Name of the index (required)
     * @param q Search Query (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getBasicSearchResultsCall(String indexName, String q, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/indexes/{index_name}/search"
            .replaceAll("\\{" + "index_name" + "\\}", apiClient.escapeString(indexName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (q != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("q", q));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "authToken", "readAppID" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getBasicSearchResultsValidateBeforeCall(String indexName, String q, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'indexName' is set
        if (indexName == null) {
            throw new ApiException("Missing the required parameter 'indexName' when calling getBasicSearchResults(Async)");
        }
        
        // verify the required parameter 'q' is set
        if (q == null) {
            throw new ApiException("Missing the required parameter 'q' when calling getBasicSearchResults(Async)");
        }
        

        com.squareup.okhttp.Call call = getBasicSearchResultsCall(indexName, q, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Basic Search which gets all documents in &#x60;index_name&#x60; for provided search criteria
     * @param indexName Name of the index (required)
     * @param q Search Query (required)
     * @return SearchSuccess
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SearchSuccess getBasicSearchResults(String indexName, String q) throws ApiException {
        ApiResponse<SearchSuccess> resp = getBasicSearchResultsWithHttpInfo(indexName, q);
        return resp.getData();
    }

    /**
     * 
     * Basic Search which gets all documents in &#x60;index_name&#x60; for provided search criteria
     * @param indexName Name of the index (required)
     * @param q Search Query (required)
     * @return ApiResponse&lt;SearchSuccess&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SearchSuccess> getBasicSearchResultsWithHttpInfo(String indexName, String q) throws ApiException {
        com.squareup.okhttp.Call call = getBasicSearchResultsValidateBeforeCall(indexName, q, null, null);
        Type localVarReturnType = new TypeToken<SearchSuccess>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Basic Search which gets all documents in &#x60;index_name&#x60; for provided search criteria
     * @param indexName Name of the index (required)
     * @param q Search Query (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getBasicSearchResultsAsync(String indexName, String q, final ApiCallback<SearchSuccess> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getBasicSearchResultsValidateBeforeCall(indexName, q, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SearchSuccess>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getDocTypeSuggestResults
     * @param indexName Name of the index (required)
     * @param docTypeName Name of the Document_type (required)
     * @param q Details of the suggest query (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDocTypeSuggestResultsCall(String indexName, String docTypeName, String q, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/indexes/{index_name}/document_types/{doc_type_name}/suggest"
            .replaceAll("\\{" + "index_name" + "\\}", apiClient.escapeString(indexName.toString()))
            .replaceAll("\\{" + "doc_type_name" + "\\}", apiClient.escapeString(docTypeName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (q != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("q", q));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "authToken", "readAppID" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDocTypeSuggestResultsValidateBeforeCall(String indexName, String docTypeName, String q, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'indexName' is set
        if (indexName == null) {
            throw new ApiException("Missing the required parameter 'indexName' when calling getDocTypeSuggestResults(Async)");
        }
        
        // verify the required parameter 'docTypeName' is set
        if (docTypeName == null) {
            throw new ApiException("Missing the required parameter 'docTypeName' when calling getDocTypeSuggestResults(Async)");
        }
        
        // verify the required parameter 'q' is set
        if (q == null) {
            throw new ApiException("Missing the required parameter 'q' when calling getDocTypeSuggestResults(Async)");
        }
        

        com.squareup.okhttp.Call call = getDocTypeSuggestResultsCall(indexName, docTypeName, q, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Gets Suggestions from &#x60;doc_type_name&#x60; in &#x60;index_name&#x60;. Please ensure you refer the getting started guides, to get the format of the query right.
     * @param indexName Name of the index (required)
     * @param docTypeName Name of the Document_type (required)
     * @param q Details of the suggest query (required)
     * @return SuggestSuccess
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SuggestSuccess getDocTypeSuggestResults(String indexName, String docTypeName, String q) throws ApiException {
        ApiResponse<SuggestSuccess> resp = getDocTypeSuggestResultsWithHttpInfo(indexName, docTypeName, q);
        return resp.getData();
    }

    /**
     * 
     * Gets Suggestions from &#x60;doc_type_name&#x60; in &#x60;index_name&#x60;. Please ensure you refer the getting started guides, to get the format of the query right.
     * @param indexName Name of the index (required)
     * @param docTypeName Name of the Document_type (required)
     * @param q Details of the suggest query (required)
     * @return ApiResponse&lt;SuggestSuccess&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SuggestSuccess> getDocTypeSuggestResultsWithHttpInfo(String indexName, String docTypeName, String q) throws ApiException {
        com.squareup.okhttp.Call call = getDocTypeSuggestResultsValidateBeforeCall(indexName, docTypeName, q, null, null);
        Type localVarReturnType = new TypeToken<SuggestSuccess>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets Suggestions from &#x60;doc_type_name&#x60; in &#x60;index_name&#x60;. Please ensure you refer the getting started guides, to get the format of the query right.
     * @param indexName Name of the index (required)
     * @param docTypeName Name of the Document_type (required)
     * @param q Details of the suggest query (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDocTypeSuggestResultsAsync(String indexName, String docTypeName, String q, final ApiCallback<SuggestSuccess> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDocTypeSuggestResultsValidateBeforeCall(indexName, docTypeName, q, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SuggestSuccess>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getDocument
     * @param indexName Name of the index (required)
     * @param docTypeName Name of the document_type (required)
     * @param docId Document ID (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDocumentCall(String indexName, String docTypeName, String docId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/indexes/{index_name}/document_types/{doc_type_name}/documents/{doc_id}"
            .replaceAll("\\{" + "index_name" + "\\}", apiClient.escapeString(indexName.toString()))
            .replaceAll("\\{" + "doc_type_name" + "\\}", apiClient.escapeString(docTypeName.toString()))
            .replaceAll("\\{" + "doc_id" + "\\}", apiClient.escapeString(docId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "authToken", "readAppID" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDocumentValidateBeforeCall(String indexName, String docTypeName, String docId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'indexName' is set
        if (indexName == null) {
            throw new ApiException("Missing the required parameter 'indexName' when calling getDocument(Async)");
        }
        
        // verify the required parameter 'docTypeName' is set
        if (docTypeName == null) {
            throw new ApiException("Missing the required parameter 'docTypeName' when calling getDocument(Async)");
        }
        
        // verify the required parameter 'docId' is set
        if (docId == null) {
            throw new ApiException("Missing the required parameter 'docId' when calling getDocument(Async)");
        }
        

        com.squareup.okhttp.Call call = getDocumentCall(indexName, docTypeName, docId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Fetches the document referenced by &#x60;doc_id&#x60; in &#x60;doc_type_name&#x60; for &#x60;index_name&#x60;
     * @param indexName Name of the index (required)
     * @param docTypeName Name of the document_type (required)
     * @param docId Document ID (required)
     * @return GetDocumentSuccess
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GetDocumentSuccess getDocument(String indexName, String docTypeName, String docId) throws ApiException {
        ApiResponse<GetDocumentSuccess> resp = getDocumentWithHttpInfo(indexName, docTypeName, docId);
        return resp.getData();
    }

    /**
     * 
     * Fetches the document referenced by &#x60;doc_id&#x60; in &#x60;doc_type_name&#x60; for &#x60;index_name&#x60;
     * @param indexName Name of the index (required)
     * @param docTypeName Name of the document_type (required)
     * @param docId Document ID (required)
     * @return ApiResponse&lt;GetDocumentSuccess&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GetDocumentSuccess> getDocumentWithHttpInfo(String indexName, String docTypeName, String docId) throws ApiException {
        com.squareup.okhttp.Call call = getDocumentValidateBeforeCall(indexName, docTypeName, docId, null, null);
        Type localVarReturnType = new TypeToken<GetDocumentSuccess>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Fetches the document referenced by &#x60;doc_id&#x60; in &#x60;doc_type_name&#x60; for &#x60;index_name&#x60;
     * @param indexName Name of the index (required)
     * @param docTypeName Name of the document_type (required)
     * @param docId Document ID (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDocumentAsync(String indexName, String docTypeName, String docId, final ApiCallback<GetDocumentSuccess> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDocumentValidateBeforeCall(indexName, docTypeName, docId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetDocumentSuccess>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getDocumentType
     * @param indexName Name of the index (required)
     * @param docTypeName Name of the document_type (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDocumentTypeCall(String indexName, String docTypeName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/indexes/{index_name}/document_types/{doc_type_name}"
            .replaceAll("\\{" + "index_name" + "\\}", apiClient.escapeString(indexName.toString()))
            .replaceAll("\\{" + "doc_type_name" + "\\}", apiClient.escapeString(docTypeName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "authToken", "readAppID" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDocumentTypeValidateBeforeCall(String indexName, String docTypeName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'indexName' is set
        if (indexName == null) {
            throw new ApiException("Missing the required parameter 'indexName' when calling getDocumentType(Async)");
        }
        
        // verify the required parameter 'docTypeName' is set
        if (docTypeName == null) {
            throw new ApiException("Missing the required parameter 'docTypeName' when calling getDocumentType(Async)");
        }
        

        com.squareup.okhttp.Call call = getDocumentTypeCall(indexName, docTypeName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Checks whether &#x60;document_type&#x60; in &#x60;index_name&#x60; exists
     * @param indexName Name of the index (required)
     * @param docTypeName Name of the document_type (required)
     * @return GetDocTypeSuccess
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GetDocTypeSuccess getDocumentType(String indexName, String docTypeName) throws ApiException {
        ApiResponse<GetDocTypeSuccess> resp = getDocumentTypeWithHttpInfo(indexName, docTypeName);
        return resp.getData();
    }

    /**
     * 
     * Checks whether &#x60;document_type&#x60; in &#x60;index_name&#x60; exists
     * @param indexName Name of the index (required)
     * @param docTypeName Name of the document_type (required)
     * @return ApiResponse&lt;GetDocTypeSuccess&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GetDocTypeSuccess> getDocumentTypeWithHttpInfo(String indexName, String docTypeName) throws ApiException {
        com.squareup.okhttp.Call call = getDocumentTypeValidateBeforeCall(indexName, docTypeName, null, null);
        Type localVarReturnType = new TypeToken<GetDocTypeSuccess>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Checks whether &#x60;document_type&#x60; in &#x60;index_name&#x60; exists
     * @param indexName Name of the index (required)
     * @param docTypeName Name of the document_type (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDocumentTypeAsync(String indexName, String docTypeName, final ApiCallback<GetDocTypeSuccess> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDocumentTypeValidateBeforeCall(indexName, docTypeName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetDocTypeSuccess>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getIndex
     * @param indexName Name of the index (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getIndexCall(String indexName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/indexes/{index_name}"
            .replaceAll("\\{" + "index_name" + "\\}", apiClient.escapeString(indexName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "authToken", "readAppID" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getIndexValidateBeforeCall(String indexName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'indexName' is set
        if (indexName == null) {
            throw new ApiException("Missing the required parameter 'indexName' when calling getIndex(Async)");
        }
        

        com.squareup.okhttp.Call call = getIndexCall(indexName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Checks whether &#x60;a particular index&#x60; {index_name} exists
     * @param indexName Name of the index (required)
     * @return GetIndexSuccess
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GetIndexSuccess getIndex(String indexName) throws ApiException {
        ApiResponse<GetIndexSuccess> resp = getIndexWithHttpInfo(indexName);
        return resp.getData();
    }

    /**
     * 
     * Checks whether &#x60;a particular index&#x60; {index_name} exists
     * @param indexName Name of the index (required)
     * @return ApiResponse&lt;GetIndexSuccess&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GetIndexSuccess> getIndexWithHttpInfo(String indexName) throws ApiException {
        com.squareup.okhttp.Call call = getIndexValidateBeforeCall(indexName, null, null);
        Type localVarReturnType = new TypeToken<GetIndexSuccess>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Checks whether &#x60;a particular index&#x60; {index_name} exists
     * @param indexName Name of the index (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getIndexAsync(String indexName, final ApiCallback<GetIndexSuccess> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getIndexValidateBeforeCall(indexName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetIndexSuccess>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
